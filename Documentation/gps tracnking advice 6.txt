Для реализации GPS-трекинга с рисованием маршрута на карте OpenStreetMap с использованием Django в качестве бэкенда и Flutter в качестве фронтенда, вам потребуется выполнить следующие шаги:

1. Бэкенд (Django):

Хранение GPS-координат:

Используйте GeoDjango, расширение Django для работы с географическими данными.[1][2][3][4]

В вашей модели Django, для хранения координат, используйте PointField из django.contrib.gis.db.models.[1][2][3][4]

В качестве пространственной базы данных рекомендуется PostgreSQL с расширением PostGIS.[1]

Альтернативно, можно использовать django-coordinatesfield или django-geoposition для простых полей широты/долготы, но GeoDjango предлагает более мощные возможности для геопространственных запросов. [1 (search result 2), 5 (search result 2)]

API для GPS-данных:

Создайте REST API с помощью Django Rest Framework (DRF) для получения и хранения данных о местоположении, а также для их предоставления фронтенду. [1 (search result 4), 2 (search result 4), 3 (search result 4)]

Вы можете использовать GeoModelSerializer из Django Rest Framework GIS для создания GeoJSON данных. [3 (search result 4)]

Для получения данных от трекеров и их владельцев, проект chedv/gps-tracking-api на GitHub может служить примером. [1 (search result 4)]

Реализуйте эндпоинт для приема GPS-координат (широта, долгота, возможно, временная метка) от Flutter-приложения.

Реализуйте эндпоинт для выдачи сохраненных GPS-координат или целых маршрутов для отрисовки на карте.

Отслеживание в реальном времени (опционально):

Для Push-уведомлений о местоположении в реальном времени можно использовать WebSockets или Firebase. [1 (search result 1)]

2. Фронтенд (Flutter):

Получение GPS-координат:

Используйте плагин Flutter для доступа к GPS устройства, чтобы получать текущие координаты пользователя.

Отображение карты OpenStreetMap:

Используйте пакеты Flutter, такие как flutter_map [1 (search result 3), 4 (search result 3), 5 (search result 3)] или flutter_osm_plugin. [3 (search result 3)]

flutter_osm_plugin предоставляет функциональность для отображения текущей позиции, создания маркеров, отслеживания местоположения пользователя и рисования дорог/маршрутов. [3 (search result 3)]

Рисование маршрута на карте:

Для рисования маршрутов вам потребуется получить последовательность координат (полилинию) от вашего Django бэкенда. [1 (search result 3)]

Используйте PolylineLayer в flutter_map для отрисовки маршрута. [1 (search result 3)]

Для расчета маршрутов между двумя или несколькими точками можно использовать сторонние сервисы, такие как OpenRouteService, который предлагает API для маршрутизации. [1 (search result 3), 4 (search result 3), 5 (search result 3)]

Полученные от OpenRouteService координаты маршрута затем можно передать в PolylineLayer для отрисовки. [1 (search result 3)]

Общая логика:

Flutter (фронтенд): Получает текущие GPS-координаты устройства.

Flutter (фронтенд): Отправляет эти координаты на Django бэкенд через API.

Django (бэкенд): Принимает координаты и сохраняет их в базе данных (используя GeoDjango).

Flutter (фронтенд): Отправляет запрос к Django бэкенду для получения сохраненных координат для определенного маршрута или временного интервала.

Django (бэкенд): Извлекает соответствующие координаты из базы данных и возвращает их Flutter-приложению.

Flutter (фронтенд): Использует полученные координаты для отрисовки маршрута на карте OpenStreetMap с помощью flutter_map или flutter_osm_plugin.

Sources
help
gegosoft.com
djangostars.com
reddit.com
github.com
Google Search Suggestions
Display of Search Suggestions is required when using Grounding with Google Search. Learn more
GPS tracking Django backend Flutter frontend OpenStreetMap
Django store GPS coordinates
Flutter OpenStreetMap draw route
Django REST API for GPS data