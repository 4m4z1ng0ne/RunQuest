Инструкции по тестированию серверной части приложения "RunQuest"

Этот документ содержит пошаговые инструкции для тестирования различных функциональных блоков серверной части приложения "RunQuest" через API.

Предварительные требования:

*   Запущенный Django-сервер (`python manage.py runserver`).
*   Доступ к базе данных (PostgreSQL с PostGIS).
*   Установленный инструмент для выполнения HTTP-запросов, такой как Postman, Insomnia, `curl` или плагин REST Client для вашего IDE.
*   Созданный суперпользователь для доступа к админ-панели (где можно создавать достижения, челленджи, трассы и просматривать данные).

Базовый URL API: `http://127.0.0.1:8000/api/` (или адрес, где запущен ваш сервер)

---

**1. Тестирование аутентификации и управления пользователями**

*   **Регистрация нового пользователя:**
    *   **Эндпоинт:** `POST /api/register/`
    *   **Тело запроса (JSON):** `{"username": "testuser", "email": "test@example.com", "password": "securepassword123"}`
    *   **Ожидаемый результат:** Статус `201 Created`, сообщение об успешной регистрации.

*   **Получение токена аутентификации (логин):**
    *   **Эндпоинт:** `POST /api/token/` (если используется simplejwt, проверьте ваш urls.py для точного пути, например, `/api/token/obtain/` или `/api/jwt/create/`)
    *   **Тело запроса (JSON):** `{"username": "testuser", "password": "securepassword123"}`
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе должны содержаться access и refresh токены. Сохраните access токен, он потребуется для всех защищенных эндпоинтов.

*   **Проверка профиля текущего пользователя:**
    *   **Эндпоинт:** `GET /api/profile/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>` (или `Token <ваш_токен>`, в зависимости от типа аутентификации)
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе данные профиля текущего пользователя.

*   **Обновление профиля текущего пользователя:**
    *   **Эндпоинт:** `PATCH /api/profile/` (или `PUT`, в зависимости от реализации)
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Тело запроса (JSON):** `{"is_public": false}` (или другие поля профиля для обновления)
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе обновленные данные профиля.

*   **Поиск пользователей:**
    *   **Эндпоинт:** `GET /api/user-search/?username=testuser` (используйте query parameters для фильтрации)
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список пользователей, соответствующих поисковому запросу.

*   **Просмотр профиля другого пользователя:**
    *   **Эндпоинт:** `GET /api/user-profiles/<id_другого_пользователя>/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, данные профиля другого пользователя (с учетом настроек приватности). Если приватность не позволяет, может быть `403 Forbidden` или частичные данные.

---

**2. Тестирование управления пробежками**

*   **Создание пробежки:**
    *   **Эндпоинт:** `POST /api/runs/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Тело запроса (JSON):** `{"distance_meters": 5000, "duration_seconds": 1800, "route_data": { "type": "LineString", "coordinates": [[lon1, lat1], [lon2, lat2], ...]}}` (предоставьте реальные или тестовые гео-координаты)
    *   **Ожидаемый результат:** Статус `201 Created`, в ответе данные созданной пробежки.

*   **Получение списка своих пробежек:**
    *   **Эндпоинт:** `GET /api/runs/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список пробежек текущего пользователя (пагинированный).

*   **Получение данных конкретной пробежки:**
    *   **Эндпоинт:** `GET /api/runs/<id_пробежки>/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, данные конкретной пробежки.

*   **Обновление данных пробежки:**
    *   **Эндпоинт:** `PATCH /api/runs/<id_пробежки>/` (или `PUT`)
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Тело запроса (JSON):** `{"calories": 300}` (или другие поля для обновления)
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе обновленные данные пробежки.

*   **Удаление пробежки:**
    *   **Эндпоинт:** `DELETE /api/runs/<id_пробежки>/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `204 No Content`.

*   **Просмотр пробежек другого пользователя:**
    *   **Эндпоинт:** `GET /api/runs/?user_id=<id_другого_пользователя>`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список пробежек другого пользователя (с учетом настроек приватности и отношений дружбы). Если недоступно, то пустой список или `403 Forbidden`.

---

**3. Тестирование достижений и челленджей**

*   **Просмотр списка всех достижений:**
    *   **Эндпоинт:** `GET /api/achievements/`
    *   **Заголовки:** (опционально, доступно и неаутентифицированным пользователям, если разрешения AllowAny)
    *   **Ожидаемый результат:** Статус `200 OK`, список всех определенных достижений.

*   **Просмотр списка всех активных челленджей:**
    *   **Эндпоинт:** `GET /api/challenges/`
    *   **Заголовки:** (опционально, доступно и неаутентифицированным пользователям, если разрешения AllowAny)
    *   **Ожидаемый результат:** Статус `200 OK`, список всех активных определенных челленджей.

*   **Просмотр своих достижений пользователя:**
    *   **Эндпоинт:** `GET /api/user-achievements/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список достижений текущего пользователя (полученных или в процессе).

*   **Просмотр своих челленджей пользователя:**
    *   **Эндпоинт:** `GET /api/user-challenges/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список челленджей текущего пользователя (активных или завершенных).

*   **Просмотр достижений/челленджей другого пользователя:**
    *   **Эндпоинт:** `GET /api/user-achievements/?user_id=<id_другого_пользователя>` и `GET /api/user-challenges/?user_id=<id_другого_пользователя>`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список достижений/челленджей другого пользователя (с учетом приватности/дружбы).

*   **Тестирование автоматического начисления (через сигналы):**
    *   Создайте достижения/челленджи через админ-панель с различными критериями (количество пробежек, дистанция, длительность, прохождение трассы).
    *   Выполните пробежки или попытки гонок, которые должны соответствовать критериям созданных достижений/челленджей.
    *   Проверьте через API (`GET /api/user-achievements/` и `GET /api/user-challenges/`) или админ-панель, что достижения были начислены, а прогресс челленджей обновился корректно.

---

**4. Тестирование гонок на время**

*   **Просмотр списка всех трасс:**
    *   **Эндпоинт:** `GET /api/racetracks/`
    *   **Заголовки:** (опционально, доступно и неаутентифицированным пользователям)
    *   **Ожидаемый результат:** Статус `200 OK`, список всех определенных трасс гонок.

*   **Создание попытки в гонке:**
    *   Создайте трассу через админ-панель.
    *   **Эндпоинт:** `POST /api/user-race-attempts/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Тело запроса (JSON):** `{"track": <id_трассы>}`
    *   **Ожидаемый результат:** Статус `201 Created`, в ответе данные созданной попытки со статусом 'pending'.

*   **Завершение попытки в гонке:**
    *   **Эндпоинт:** `POST /api/user-race-attempts/<id_попытки>/complete/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Тело запроса (JSON):** `{"duration_seconds": 1200, "actual_route_data": { "type": "LineString", "coordinates": [[lon1, lat1], [lon2, lat2], ...]}, "actual_distance_meters": 5000}` (предоставьте фактические данные пробежки)
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе обновленные данные попытки со статусом 'completed' и начисленным XP (если реализовано).

*   **Отмена попытки в гонке:**
    *   **Эндпоинт:** `POST /api/user-race-attempts/<id_попытки>/cancel-race/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе обновленные данные попытки со статусом 'cancelled'.

*   **Публикация результата попытки в гонке:**
    *   **Эндпоинт:** `POST /api/user-race-attempts/<id_попытки>/publish-result/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK` (если публиковать результат возможно).

*   **Сравнение маршрута попытки с трассой:**
    *   **Эндпоинт:** `GET /api/user-race-attempts/<id_попытки>/compare-route/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе информация о сопоставлении маршрутов (если реализовано).

*   **Просмотр таблицы лидеров для всех трасс:**
    *   **Эндпоинт:** `GET /api/race-leaderboard/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список лучших результатов для всех трасс (пагинированный).

---

**5. Тестирование системы друзей**

*   **Отправка запроса в друзья:**
    *   **Эндпоинт:** `POST /api/friends/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Тело запроса (JSON):** `{"to_user": <id_пользователя, которому отправляется запрос>}`
    *   **Ожидаемый результат:** Статус `201 Created`, в ответе данные запроса со статусом 'pending'.

*   **Просмотр своих запросов в друзья (отправленных и полученных):**
    *   **Эндпоинт:** `GET /api/friends/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список всех запросов в друзья, связанных с текущим пользователем.

*   **Просмотр списка своих друзей:**
    *   **Эндпоинт:** `GET /api/friends/my_friends/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список пользователей, с которыми у текущего пользователя установлены дружеские отношения.

*   **Просмотр входящих запросов в друзья:**
    *   **Эндпоинт:** `GET /api/friends/pending_requests/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список запросов в друзья со статусом 'pending', где текущий пользователь является получателем.

*   **Принятие запроса в друзья:**
    *   **Эндпоинт:** `POST /api/friends/<id_запроса_в_друзья>/accept/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе обновленные данные запроса со статусом 'accepted'.

*   **Отклонение запроса в друзья:**
    *   **Эндпоинт:** `POST /api/friends/<id_запроса_в_друзья>/reject/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе обновленные данные запроса со статусом 'rejected'.

*   **Отмена отправленного запроса в друзья:**
    *   **Эндпоинт:** `POST /api/friends/<id_запроса_в_друзья>/cancel-sent/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе обновленные данные запроса со статусом 'cancelled' или удаление объекта запроса (в зависимости от реализации).

*   **Удаление из друзей (удаление связи):**
    *   Найдите ID связи дружбы (`GET /api/friends/`)
    *   **Эндпоинт:** `DELETE /api/friends/<id_связи_дружбы>/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `204 No Content`.

*   **Блокировка пользователя:**
    *   **Эндпоинт:** `POST /api/blocks/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Тело запроса (JSON):** `{"blocked": <id_пользователя_для_блокировки>}`
    *   **Ожидаемый результат:** Статус `201 Created`.

*   **Просмотр списка заблокированных пользователей:**
    *   **Эндпоинт:** `GET /api/blocks/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список пользователей, заблокированных текущим пользователем.

*   **Разблокировка пользователя:**
    *   Найдите ID блокировки (`GET /api/blocks/`)
    *   **Эндпоинт:** `DELETE /api/blocks/<id_блокировки>/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `204 No Content`.

---

**6. Тестирование ленты активности и комментариев**

*   **Просмотр ленты активности текущего пользователя:**
    *   **Эндпоинт:** `GET /api/activity-feed/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список элементов ленты активности (пагинированный), видимых текущему пользователю.

*   **Добавление комментария к записи ленты активности:**
    *   Найдите ID записи ленты активности (`GET /api/activity-feed/`).
    *   **Эндпоинт:** `POST /api/activity-feed/<id_записи_ленты_активности>/comments/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Тело запроса (JSON):** `{"text": "Отличная пробежка!"}`
    *   **Ожидаемый результат:** Статус `201 Created`, в ответе данные созданного комментария.

*   **Просмотр комментариев к записи ленты активности:**
    *   **Эндпоинт:** `GET /api/activity-feed/<id_записи_ленты_активности>/comments/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список комментариев к указанной записи.

*   **Обновление комментария (только свой комментарий):**
    *   Найдите ID комментария.
    *   **Эндпоинт:** `PATCH /api/activity-feed/comments/<id_комментария>/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Тело запроса (JSON):** `{"text": "Исправленный комментарий."}`
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе обновленные данные комментария.

*   **Удаление комментария (только свой комментарий):**
    *   Найдите ID комментария.
    *   **Эндпоинт:** `DELETE /api/activity-feed/comments/<id_комментария>/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `204 No Content`.

---

**7. Тестирование совместных пробежек**

*   **Отправка приглашения на совместную пробежку:**
    *   **Эндпоинт:** `POST /api/joint-run-invitations/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Тело запроса (JSON):** `{"recipient": <id_пользователя, которого приглашают>, "suggested_time": "YYYY-MM-DDTHH:MM:SSZ", "suggested_racetrack": <id_трассы, опционально>, "meeting_location": "Начало парка"}`
    *   **Ожидаемый результат:** Статус `201 Created`, в ответе данные приглашения со статусом 'pending'.

*   **Просмотр своих приглашений (отправленных и полученных):**
    *   **Эндпоинт:** `GET /api/joint-run-invitations/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список приглашений, связанных с текущим пользователем.

*   **Принятие приглашения на совместную пробежку:**
    *   Найдите ID приглашения (где вы получатель, статус 'pending').
    *   **Эндпоинт:** `POST /api/joint-run-invitations/<id_приглашения>/accept/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе обновленные данные приглашения со статусом 'accepted', должна быть создана связанная запись PlannedJointRun.

*   **Отклонение приглашения на совместную пробежку:**
    *   Найдите ID приглашения.
    *   **Эндпоинт:** `POST /api/joint-run-invitations/<id_приглашения>/reject/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе обновленные данные приглашения со статусом 'rejected'.

*   **Отмена отправленного приглашения на совместную пробежку:**
    *   Найдите ID приглашения (где вы отправитель, статус 'pending').
    *   **Эндпоинт:** `POST /api/joint-run-invitations/<id_приглашения>/cancel/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, в ответе обновленные данные приглашения со статусом 'cancelled'.

*   **Просмотр запланированных совместных пробежек:**
    *   **Эндпоинт:** `GET /api/planned-joint-runs/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список запланированных совместных пробежек, в которых участвует текущий пользователь.

*   **Старт запланированной совместной пробежки:**
    *   Найдите ID запланированной совместной пробежки (PlannedJointRun).
    *   **Эндпоинт:** `POST /api/planned-joint-runs/<id_запланированной_пробежки>/start/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, у объекта PlannedJointRun должно быть установлено `actual_start_time`. После этого участники могут привязать свои пробежки к этой запланированной (`POST /api/runs/` с `planned_joint_run` полем).

---

**8. Тестирование токенов устройств (для будущих push-уведомлений)**

*   **Регистрация токена устройства:**
    *   **Эндпоинт:** `POST /api/device-tokens/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Тело запроса (JSON):** `{"token": "ваш_уникальный_токен_устройства", "device_type": "android"}` (или "ios")
    *   **Ожидаемый результат:** Статус `201 Created`.

*   **Просмотр своих токенов устройств:**
    *   **Эндпоинт:** `GET /api/device-tokens/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `200 OK`, список токенов устройств, зарегистрированных для текущего пользователя.

*   **Удаление токена устройства:**
    *   Найдите ID токена устройства.
    *   **Эндпоинт:** `DELETE /api/device-tokens/<id_токена>/`
    *   **Заголовки:** `Authorization: Bearer <ваш_access_токен>`
    *   **Ожидаемый результат:** Статус `204 No Content`.

---

**Общие рекомендации для тестирования:**

*   Используйте аутентифицированные запросы (с access токеном) для всех защищенных эндпоинтов.
*   Проверяйте различные сценарии, включая успешные запросы, запросы с неверными данными, запросы без аутентификации (где это не разрешено).
*   Тестируйте настройки приватности, просматривая данные одного пользователя под учетными записями другого пользователя, который является или не является его другом, а также с публичным/непубличным профилем.
*   Проверяйте, что автоматическое начисление достижений и обновление челленджей происходит корректно после выполнения соответствующих действий (пробежки, гонки).
*   Используйте админ-панель для предварительного создания необходимых объектов (достижений, челленджей, трасс) и для проверки данных, созданных через API. 