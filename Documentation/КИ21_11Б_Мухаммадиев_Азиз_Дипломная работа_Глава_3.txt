Глава 3. Реализация мобильного приложения для отслеживания физической активности с эелментами геймификации "RunQuest"

3.1. Архитектура программного обеспечения
    Разработка мобильного приложения "RunQuest" осуществлялась с использованием клиент-серверной архитектуры. 
    Клиентская часть реализована как кроссплатформенное мобильное приложение, 
    разработанное на фреймворке Flutter, что обеспечивает его функционирование на операционных системах Android и iOS. 
    Серверная часть представляет собой бэкенд, разработанный с использованием фреймворка Django REST Framework, 
    предоставляющий API для взаимодействия с мобильным приложением и обработки данных.

3.2. Реализация серверной части
    Серверная часть приложения "RunQuest" разработана на языке программирования Python 
    с использованием фреймворка Django REST Framework. 
    Для управления базами данных используется PostgreSQL. 
    Основные компоненты серверной части включают:
*   **Django**: 
        Высокоуровневый Python веб-фреймворк, способствующий быстрой разработке безопасных и поддерживаемых веб-приложений.
*   **Django REST Framework**: 
        Мощный и гибкий инструментарий для создания веб-API. Он используется для создания RESTful-интерфейсов, 
        которые позволяют мобильному приложению взаимодействовать с базой данных и бизнес-логикой.
*   **psycopg2-binary**: 
        Адаптер PostgreSQL для Python, необходимый для взаимодействия Django с базой данных PostgreSQL.
*   **drf-yasg**: 
        Используется для автоматической генерации документации API в формате OpenAPI (Swagger UI/ReDoc), 
        что упрощает тестирование и интеграцию клиентской части.
*   **django-cors-headers**: 
        Обеспечивает корректную работу с Cross-Origin Resource Sharing (CORS), 
        что критически важно для взаимодействия между разными доменами (клиентским и серверным).
*   **django-filter**: 
        Позволяет легко добавлять фильтрацию данных к API-эндпоинтам, что повышает гибкость запросов от клиентской части.
*   **Pillow**: 
        Библиотека для работы с изображениями, 
        используемая для обработки пользовательских аватаров или других графических данных.
*   **dj-rest-auth** и **django-allauth**: 
        Используются для реализации системы аутентификации и авторизации пользователей, включая регистрацию, 
        вход в систему, сброс пароля и интеграцию с социальными сетями.
*   **django-environ**: 
        Позволяет управлять настройками приложения через переменные окружения, 
        что упрощает развертывание и конфигурирование.
*   **django-map-widgets**, **django-editor-ymaps**: 
        Эти библиотеки используются для интеграции картографических сервисов и работы с геоданными, 
        что критически важно для отслеживания маршрутов и отображения активности на карте.
*   **Shapely**: 
        Библиотека для манипулирования и анализа планарных геометрических объектов, 
        используемая для геопространственных операций.

API серверной части предоставляет эндпоинты для управления пользователями, 
их активностью (бег, ходьба, велосипед), сохранения маршрутов на карте, отображения статистики и 
взаимодействия с другими функциями приложения.

3.3. Реализация клиентской части
Клиентская часть мобильного приложения "RunQuest" разработана на фреймворке Flutter. 
Flutter позволяет создавать высокопроизводительные, визуально привлекательные и нативные приложения для Android и iOS 
из единой кодовой базы. Основные аспекты реализации клиентской части включают:
*   **Пользовательский интерфейс (UI)**: 
        Разработан с использованием виджетов Flutter, 
        обеспечивая современный и интуитивно понятный дизайн. Включает экраны для регистрации/входа, 
        главного дашборда, отслеживания активности, просмотра маршрутов на карте, профиля пользователя и настроек.
*   **Управление состоянием**: 
        Для эффективного управления состоянием приложения используются подходящие паттерны (например, 
        Provider, BLoC или Riverpod), что обеспечивает реактивность и производительность.
*   **Взаимодействие с API**: 
        Мобильное приложение взаимодействует с бэкенд-сервером посредством HTTP-запросов. 
        Для выполнения сетевых запросов используются библиотеки, такие как `http` или `Dio`.
*   **Геолокация и отслеживание активности**: 
        Для получения данных о местоположении пользователя и отслеживания его перемещений используются встроенные службы геолокации устройства. 
        Данные о маршруте и параметрах активности (расстояние, скорость, калории) собираются и отправляются на сервер.
*   **Картографические сервисы**: 
        Интеграция с картографическими сервисами (например, Google Maps или OpenStreetMap) 
        для отображения маршрутов пользователя на карте в реальном времени и после завершения активности.
*   **Локальное хранение данных**: 
        Для кэширования данных или хранения пользовательских настроек могут использоваться механизмы локального хранения (например, `shared_preferences` или SQLite).
*   **Уведомления**: 
        Реализованы push-уведомления для информирования пользователей о достижениях, 
        новых функциях или напоминаниях о тренировках.

3.4. База данных
Для хранения данных приложения "RunQuest" используется реляционная база данных PostgreSQL. 
Выбор PostgreSQL обусловлен её надёжностью, производительностью, поддержкой геопространственных данных (через расширение PostGIS, 
используемое Django GeoDjango) и широкими возможностями для масштабирования. 
Структура базы данных включает таблицы для хранения информации о пользователях, их физической активности 
(типы тренировок, дата, время, продолжительность, дистанция, калории), деталях маршрутов (координаты точек), 
а также других вспомогательных данных, таких как настройки и достижения пользователей.

3.5. Развертывание
Развертывание серверной части приложения может быть осуществлено на различных платформах, 
таких как виртуальные частные серверы (VPS) или облачные провайдеры (например, Heroku, AWS, Google Cloud Platform). 
Рекомендуется использовать контейнеризацию с Docker для упрощения процесса развертывания и обеспечения переносимости. 
Клиентская часть развертывается через магазины приложений Google Play Store для Android и Apple App Store для iOS. 